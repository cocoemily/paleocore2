# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-11-15 16:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('award_id', models.CharField(blank=True, max_length=30, null=True)),
                ('doc_id', models.CharField(blank=True, max_length=100, null=True)),
                ('account_no', models.BigIntegerField(blank=True, null=True)),
                ('account_title', models.CharField(blank=True, max_length=255, null=True)),
                ('award_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('award_status', models.CharField(blank=True, max_length=100, null=True)),
                ('semester', models.CharField(blank=True, max_length=100, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('award_summary', models.CharField(blank=True, max_length=255, null=True)),
                ('recipient_major', models.CharField(blank=True, max_length=255, null=True)),
                ('recipient_classification', models.CharField(blank=True, max_length=30, null=True)),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('residency', models.CharField(blank=True, max_length=100, null=True)),
                ('distribution_method', models.CharField(blank=True, max_length=100, null=True)),
                ('travel', models.NullBooleanField()),
                ('destination', models.CharField(blank=True, max_length=100, null=True)),
                ('purpose', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(blank=True, choices=[('Student', 'Student self evaluation'), ('Faculty', 'Faculty student evaluation')], max_length=255, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('adviser_questionnaire', models.BooleanField(default=False)),
                ('student_questionnaire', models.BooleanField(default=False)),
                ('evaluation_decision', models.CharField(blank=True, choices=[('Sufficient', 'Sufficient'), ('Concern', 'Concern'), ('Serious Concern', 'Serious Concern')], max_length=255, null=True)),
                ('academic_decision', models.CharField(blank=True, choices=[('Sufficient', 'Sufficient'), ('Concern', 'Concern'), ('Serious Concern', 'Serious Concern')], max_length=50, null=True)),
                ('research_decision', models.CharField(blank=True, choices=[('Sufficient', 'Sufficient'), ('Concern', 'Concern'), ('Serious Concern', 'Serious Concern')], max_length=50, null=True)),
                ('professional_decision', models.CharField(blank=True, choices=[('Sufficient', 'Sufficient'), ('Concern', 'Concern'), ('Serious Concern', 'Serious Concern')], max_length=50, null=True)),
                ('teaching_decision', models.CharField(blank=True, choices=[('Sufficient', 'Sufficient'), ('Concern', 'Concern'), ('Serious Concern', 'Serious Concern')], max_length=50, null=True)),
                ('commendations', models.TextField(blank=True, null=True)),
                ('evaluation_text', models.TextField(blank=True, null=True)),
                ('evaluation_remarks', models.TextField(blank=True, null=True)),
                ('registration', models.CharField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time'), ('ISR', 'ISR'), ('Graduated', 'Graduated'), ('Exited', 'Exited'), ('On Leave', 'On Leave')], help_text='Registration Status', max_length=255, null=True)),
            ],
            options={
                'ordering': ['year', 'student__name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eid', models.CharField(blank=True, help_text='UT EID', max_length=10, null=True, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('former_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('nickname', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('office', models.CharField(blank=True, max_length=255, null=True)),
                ('program', models.CharField(blank=True, choices=[('Archaeology', 'Archaeology'), ('Biological Anthropology', 'Biological Anthropology'), ('Linguistic Anthropology', 'Linguistic Anthropology'), ('Sociocultural Anthropology', 'Sociocultural Anthropology')], max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='eval.Person')),
                ('appointment', models.CharField(blank=True, choices=[('emeritus', 'emeritus'), ('professor', 'professor'), ('associate_professor', 'associate_professor'), ('assistant_professor', 'assistant_professor'), ('lecturer', 'lecturer')], max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Faculty',
                'ordering': ['name'],
            },
            bases=('eval.person',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='eval.Person')),
                ('committee_text', models.TextField(blank=True, null=True)),
                ('cohort', models.IntegerField(blank=True, null=True)),
                ('exit_semester', models.IntegerField(blank=True, null=True)),
                ('first_semester', models.IntegerField(blank=True, null=True)),
                ('last_semester', models.IntegerField(blank=True, null=True)),
                ('residence', models.CharField(blank=True, choices=[('US', 'US'), ('International', 'International'), ('PRA', 'PRA')], max_length=255, null=True)),
                ('texas_resident', models.NullBooleanField()),
                ('home_town', models.TextField(blank=True, max_length=255, null=True)),
                ('prior_institution', models.TextField(blank=True, max_length=255, null=True)),
                ('prior_degree', models.TextField(blank=True, max_length=255, null=True)),
                ('cola_status', models.TextField(blank=True, max_length=255, null=True)),
                ('ut_assumed_status', models.CharField(blank=True, max_length=255, null=True)),
                ('ut_derived_status', models.CharField(blank=True, max_length=255, null=True)),
                ('ut_school_major', models.CharField(blank=True, max_length=20, null=True)),
                ('ut_program_code', models.CharField(blank=True, max_length=20, null=True)),
                ('ut_withdrawn', models.CharField(blank=True, max_length=20, null=True)),
                ('active', models.BooleanField(default=False)),
                ('status', models.CharField(blank=True, choices=[('Progressing', 'Progressing'), ('Exited', 'Exited'), ('Exited MA', 'Exited MA'), ('Exited PhD', 'Exited PhD')], max_length=100, null=True)),
                ('abd', models.BooleanField(default=False)),
                ('registration', models.CharField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time'), ('ISR', 'ISR'), ('Graduated', 'Graduated'), ('Exited', 'Exited'), ('On Leave', 'On Leave')], help_text='Registration Status', max_length=255, null=True)),
                ('enrollment', models.CharField(blank=True, max_length=255, null=True)),
                ('concern', models.BooleanField(default=False)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('track', models.IntegerField(default=6)),
                ('ma_thesis', models.BooleanField(default=False, help_text='Has completed MA thesis/report')),
                ('ma_thesis_date', models.DateField(blank=True, null=True)),
                ('ma_thesis_title', models.TextField(blank=True, null=True)),
                ('quals', models.BooleanField(default=False)),
                ('quals_date', models.DateField(blank=True, null=True)),
                ('phd_admitted', models.BooleanField(default=False, help_text='Has been admitted to the PhD program')),
                ('phd_admitted_date', models.DateField(blank=True, null=True)),
                ('prospectus', models.BooleanField(default=False, help_text='Has defended a PhD prospectus/proposal')),
                ('prospectus_date', models.DateField(blank=True, null=True)),
                ('defense', models.BooleanField(default=False, help_text='Has defended a PhD dissertation')),
                ('defense_date', models.DateField(blank=True, null=True)),
                ('revisions', models.BooleanField(default=False)),
                ('revisions_date', models.DateField(blank=True, null=True)),
                ('graduated', models.BooleanField(default=False, help_text='Has graduated and exited the program')),
                ('graduated_date', models.DateField(blank=True, null=True)),
                ('exited', models.BooleanField(default=False)),
                ('exited_date', models.DateField(blank=True, null=True)),
                ('summer_funding', models.TextField(blank=True, null=True)),
                ('phd_thesis_title', models.TextField(blank=True, null=True)),
                ('phd_thesis_abstract', models.TextField(blank=True, null=True)),
                ('student_eval_2018', models.BooleanField(default=False)),
                ('fac_eval_2018', models.BooleanField(default=False)),
                ('courses', models.BooleanField(default=False)),
                ('courses_date', models.DateField(blank=True, null=True)),
                ('language', models.BooleanField(default=False)),
                ('language_date', models.DateField(blank=True, null=True)),
                ('co-supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_cosupervisor', to='eval.Faculty')),
                ('committee', models.ManyToManyField(blank=True, to='eval.Faculty')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_supervisor', to='eval.Faculty')),
            ],
            options={
                'ordering': ['cohort', 'name'],
            },
            bases=('eval.person',),
        ),
        migrations.AddField(
            model_name='evaluation',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eval.Student'),
        ),
        migrations.AddField(
            model_name='award',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eval.Student'),
        ),
        migrations.CreateModel(
            name='ActiveStudent',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('eval.student',),
        ),
    ]
