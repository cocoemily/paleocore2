# Generated by Django 3.2.15 on 2023-02-22 18:17

from django.db import migrations
import pandas as pd
from origins.ontologies import axial, appendicular, complete, nearly_complete, fragment
from django.conf import settings
import os

source_path = os.path.join(settings.PROJECT_ROOT, 'origins','data','hadar_element_data.xlsx')
def import_data(source=source_path):
    xls = pd.ExcelFile(source)
    df = xls.parse(xls.sheet_names[0])
    return df

def translate_region(verbatim_region):
    region = None
    if verbatim_region:
        if verbatim_region == 'AX':
            region = axial
        elif verbatim_region == 'APP':
            region = appendicular
    return region

def translate_dental(verbatim_dental):
    dental = None
    if verbatim_dental == 'DEN':
        dental = True
    elif verbatim_dental == 'NONDEN':
        dental = False
    return dental

def translate_completeness(verbatim_completeness):
    completeness = None
    if verbatim_completeness:
        if verbatim_completeness == 'COMP':
            completeness = complete
        elif verbatim_completeness == 'NEARCOMP':
            completeness = nearly_complete
        elif verbatim_completeness == 'FRAG':
            completeness = fragment
    return completeness

def update_element(data, index, fossil_element):
    fossil_element.uberon_id = data.loc[index].uberon_ID
    fossil_element.anatomical_region = translate_region(data.loc[index].region)
    fossil_element.side = data.loc[index].side
    fossil_element.dental = translate_dental(data.loc[index].dental_nondental)
    fossil_element.completeness = translate_completeness(data.loc[index].preservation)
    fossil_element.preserved_part = data.loc[index].preservation_description
    fossil_element.save()

def update_fossils(apps, schema_editor):
    data = import_data()
    Fossil = apps.get_model('origins', 'Fossil')
    FossilElement = apps.get_model('origins', 'FossilElement')
    Site = apps.get_model('origins', 'Site')
    hadar = Site.objects.get(name='Hadar')
    for i in data.index:
        cat_no = data.loc[i].catalog_number  # get the catalog number for the active row in the data frame
        # fetch the matching Fossil instance, if it exists, else create it.
        obj, created = Fossil.objects.get_or_create(catalog_number=cat_no)
        if created:
            obj.site = hadar
            obj.save()
        # fetch the matching FosselElement instance if it exists.
        # The code below will update only the fossils with a single element.
        # Fossils with more than one element will need to be updated manually.
        elements = FossilElement.objects.filter(fossil=obj)
        if elements:
            if elements.count() == 1:
                update_element(data, i, elements[0])
            else:
                pass
        else:
            new_element = FossilElement()
            new_element.fossil = obj
            update_element(data, i, new_element)

class Migration(migrations.Migration):

    dependencies = [
        ('origins', '0102_auto_20230222_1751'),
    ]

    operations = [
        migrations.RunPython(update_fossils, reverse_code=migrations.RunPython.noop),
    ]
